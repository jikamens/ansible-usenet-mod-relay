---
- hosts: mod_relays
  tasks:
  - name: set hostname
    hostname: name='{{inventory_hostname}}'

  - name: set postfix/main_mailer_type
    debconf:
      name: postfix
      question: postfix/main_mailer_type
      value: 'Internet Site'
      vtype: select
    when: ansible_distribution == 'Ubuntu'

  - name: set postfix/mailname
    debconf:
      name: postfix
      question: postfix/mailname
      value: '{{inventory_hostname}}'
      vtype: string
    when: ansible_distribution == 'Ubuntu'

  - name: remove firewalld and fail2ban-firewalld
    package:
      name:
      - firewalld
      - fail2ban-firewalld
      state: absent
    when: ansible_distribution == 'Fedora'
      
  - name: install packages needed for mod-relay
    package:
      name:
      - perl
      - procmail
      - sed
      - dos2unix
      - grep
      - coreutils
      - diffutils
      - logwatch
      - ufw

  # This needs to be separate so we can detect whether crond needs to
  # be restarted.
  - name: install postfix
    package: name=postfix
    register: postfix_installed

  - name: install Ubuntu-specific packages for mod-relay
    apt:
      name:
      - bind9
      - fail2ban
      # For Ansible
      - python3
      - mailutils
      - apticron
      # For relay-bounce-monitor.pl
      - libtimedate-perl
    when: ansible_distribution == 'Ubuntu'

  - name: install Fedora-specific packages for mod-relay
    dnf:
      name:
      - bind-chroot
      - fail2ban-server
      - fail2ban-sendmail
      # For Ansible
      - python3
      - mailx
      - dnf-automatic
      # For relay-bounce-monitor.pl
      - perl-TimeDate
    when: ansible_distribution == 'Fedora'

  - name: check if SELinux is enforced
    command: getenforce
    register: getenforce
    failed_when: false
    changed_when: false

  - block:
    # Required by Ansible when selinux is being enforced
    - apt: name=python-selinux
      when: ansible_distribution=='Ubuntu'
    - dnf:
        name:
        - python3-libselinux
        - python3-policycoreutils
      when: ansible_distribution == 'Fedora'
    when: 'getenforce.stdout is defined and "Enforcing" in getenforce.stdout'

  - block:
    - ini_file:
        dest: /etc/dnf/automatic.conf
        section: commands
        option: apply_updates
        value: yes
    - ini_file:
        dest: /etc/dnf/automatic.conf
        section: main
        option: reboot
        value: when-needed
    - ini_file:
        dest: /etc/dnf/automatic.conf
        section: emitters
        option: emit_via
        value: email
    - ini_file:
        dest: /etc/dnf/automatic.conf
        section: email
        option: email_from
        value: root
    - service: name=dnf-automatic.timer enabled=yes
    when: ansible_distribution == 'Fedora'

  - name: lock mtm account
    user: name=mtm password_lock=yes

  - name: create /home/mtm/bin
    file: dest=/home/mtm/bin state=directory

  - name: install mtm auto-response script
    copy: src=mtm.sh dest=/home/mtm/bin/mtm.sh mode=0755

  - name: create /home/mtm/.procmailrc
    copy:
      dest: /home/mtm/.procmailrc
      content: |
        :0 HB
        * X-BeenThere: mtm@{{inventory_hostname}}
        /dev/null

        :0 w
        |$HOME/bin/mtm.sh

        :0 w
        |mail -s 'mtm message' root

  - name: lock modupdate account
    user: name=modupdate password_lock=yes

  - block:
    - name: install /etc/selinux/mod-relay.te
      copy:
        dest: /etc/selinux/mod-relay.te
        content: |
          module mod-relay 1.5;

          require {
                  # For access to /home/modupdate
                  type postfix_smtpd_t;
                  type user_home_t;
                  class file { getattr lock open read map execute execute_no_trans };

                  # For procmail running postalias on new aliases file
                  # (This also includes the "map", "execute", and
                  # "execute_no_trans" attributes of the "class file" statement
                  # above.)
                  type postfix_etc_t;
                  type procmail_t;
                  type sysfs_t;
                  type tmpfs_t;
                  type io_uring_t;
                  type postfix_master_exec_t;
                  class io_uring sqpoll;
                  class anon_inode { create map read write };
                  class filesystem getattr;
                  class dir { read search open getattr };
          }

          #============= postfix_smtpd_t ==============
          allow postfix_smtpd_t user_home_t:file { getattr lock open read };

          allow procmail_t io_uring_t:anon_inode { create map read write };
          allow procmail_t postfix_etc_t:dir { read search open getattr };
          allow procmail_t postfix_etc_t:file { getattr open read };
          allow procmail_t postfix_master_exec_t:file { getattr open read execute execute_no_trans };

          #!!!! This avc can be allowed using the boolean 'domain_can_mmap_files'
          allow procmail_t postfix_master_exec_t:file map;
          allow procmail_t self:io_uring sqpoll;
          allow procmail_t sysfs_t:file { open read };
          allow procmail_t tmpfs_t:filesystem getattr;
      register: selinux_te
    - name: create /etc/selinux/mod-relay.mod
      command: checkmodule -M -m -o /etc/selinux/mod-relay.mod /etc/selinux/mod-relay.te
      when: selinux_te.changed
      register: selinux_mod
    - name: create /etc/selinux/mod-relay.pp
      command: semodule_package -o /etc/selinux/mod-relay.pp -m /etc/selinux/mod-relay.mod
      when: selinux_mod.changed
      register: selinux_pp
    - name: install mod-relay selinux policy
      command: semodule -i /etc/selinux/mod-relay.pp
      when: selinux_pp.changed
      register: semodule
    # Actually, I don't think this is necessary because we're not actually
    # changing any of the file contexts in /home/modupdate, we're just changing
    # postfix's permissions for them. So I'm commenting this out for now.
    # - name: fix selinux permissions on /home/modupdate
    #   command: restorecon -R /home/modupdate
    #   when: semodule.changed
    when: 'getenforce.stdout is defined and "Enforcing" in getenforce.stdout'

  - name: make sure /home/modupdate is world-readable
    file:
      path: /home/modupdate
      state: directory
      mode: 0755

  - name: install /home/modupdate/.procmailrc
    copy:
      dest: /home/modupdate/.procmailrc
      content: |
        LOGFILE=$HOME/procmail.log
        VERBOSE=on

        :0 w
        * From: .*moderators-update@lists\.eyrie\.org
        * Subject: Update to news moderated group aliases
        |$HOME/bin/modupdate.sh

        :0
        * Subject: Diff of updated moderated newsgroup aliases
        /dev/null

        :0 w
        |mail -s 'modupdate message' root

  - name: create /home/modupdate/bin
    file: dest=/home/modupdate/bin state=directory

  - name: install modupdate.sh script
    copy:
      src: modupdate.sh
      dest: /home/modupdate/bin/modupdate.sh
      mode: 0755

  - name: create /home/modupdate/aliases
    file:
      dest: /home/modupdate/aliases
      owner: modupdate
      group: modupdate
      state: directory

  - name: install /home/modupdate/aliases/aliases
    copy:
      src: aliases
      dest: /home/modupdate/aliases/aliases
      owner: modupdate
      group: modupdate
      mode: 0644
      force: no
    register: aliases_changed

  - name: disable bouncing aliases
    lineinfile:
      dest: /home/modupdate/aliases/aliases
      regexp: '^{{item}}:'
      line: '{{item}}:	mod-bounce.no-mod-info@isc.org'
    # List aliases here that are bouncing and haven't been updated in
    # the master aliases list yet. When there aren't any pending
    # updates, set this to [].
    with_items: []
    register: aliases_fixes

  - name: rebuild postmap aliases map
    command: /usr/sbin/postalias /home/modupdate/aliases/aliases
    when: aliases_changed.changed or aliases_fixes.changed

  - name: configure root alias
    lineinfile:
      dest: /etc/aliases
      line: 'root: {{root_email_address}}'
      regexp: '^\s*root\s*:'
    when: root_email_address is defined
    register: root_alias

  - name: run newaliases
    command: newaliases
    when: root_alias.changed

  # caching nameserver is required so Spamhaus accepts our DNS queries. See
  # https://check.spamhaus.org/returnc/pub/107.191.50.163, or if that doesn't
  # work, https://www.spamhaus.org/resource-hub/dnsbl/using-our-public-mirrors-check-your-return-codes-now./
  - name: disable systemd-resolved
    service: name=systemd-resolved enabled=no state=stopped
  - name: configure /etc/resolv.conf
    copy:
      dest: /etc/resolv.conf
      content: |
        nameserver 127.0.0.1

  - name: enable caching nameserver on Ubuntu
    service: name=bind9 enabled=yes state=started
    when: ansible_distribution == 'Ubuntu'
    register: named_ubuntu

  - name: enable caching nameserver on Fedora
    service: name=named-chroot enabled=yes state=started
    when: ansible_distribution == 'Fedora'
    register: named_fedora

  - name: set alias_maps in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^alias_maps\s*='
      line: 'alias_maps = hash:/etc/aliases hash:/home/modupdate/aliases/aliases'
    register: alias_maps

  - name: set myhostname in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^myhostname\s*='
      line: 'myhostname = {{inventory_hostname}}'
    register: myhostname

  - name: set mydestination in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^mydestination\s*='
      line: 'mydestination = $myhostname, localhost.$mydomain, localhost, moderators.isc.org, moderators.uu.net'
    register: mydestination

  - name: set mailbox_command in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^mailbox_command\s*='
      line: 'mailbox_command = /usr/bin/procmail -a "$EXTENSION"'
    register: mailbox_command

  - name: set smtpd_recipient_restrictions in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^smtpd_recipient_restrictions\s*='
      line: 'smtpd_recipient_restrictions = permit_mynetworks, reject_rbl_client zen.spamhaus.org=127.0.0.[2..11], permit_mx_backup, reject_unauth_destination, warn_if_reject, reject_rbl_client zen.spamhaus.org=127.255.255.[1..255]'
    register: smtpd_recipient_restrictions

  - name: set compatibility_level in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^compatibility_level\s*='
      line: 'compatibility_level = 2'
    register: compatibility_level

  - name: set inet_interfaces to all in /etc/postfix/main.cf
    lineinfile:
      dest: /etc/postfix/main.cf
      regexp: '^inet_interfaces\s*='
      line: 'inet_interfaces = all'
    register: inet_interfaces

  - name: restart postfix
    service: name=postfix enabled=yes state=restarted
    when: myhostname.changed or mydestination.changed or
          mailbox_command.changed or smtpd_recipient_restrictions.changed or
          compatibility_level.changed or inet_interfaces.changed or
          named_ubuntu.changed or named_fedora.changed
    register: restarted

  - name: make sure postfix is running
    service: name=postfix enabled=yes state=started
    when: not restarted.changed
    register: started

  # If crond was started before postfix was installed and configured
  # properly, then it may have decided on startup not to generate
  # emails, and it won't change it mind without a restart.
  - name: restart crond so email from it will work
    service: name=crond state=restarted
    when: postfix_installed.changed or restarted.changed or started.changed

  - block:
    - name: install telnet for /etc/cron.hourly/snitch
      package: name=telnet
    - name: install /etc/cron.hourly/snitch
      template:
        src: cron-snitch
        dest: /etc/cron.hourly/snitch
        mode: 0755
    when: snitch_url is defined

  - name: install relay-bounce-monitor.pl
    copy:
      dest: /usr/local/bin/relay-bounce-monitor.pl
      src: relay-bounce-monitor.pl
      mode: 0755

  - name: install /etc/cron.daily/relay-bounce-monitor
    file:
      dest: /etc/cron.daily/relay-bounce-monitor
      state: link
      src: /usr/local/bin/relay-bounce-monitor.pl

  - name: configure fail2ban for polling
    ini_file:
      dest: /etc/fail2ban/jail.local
      create: yes
      section: DEFAULT
      option: backend
      value: polling
    register: fail2ban_backend

  - name: enable fail2ban postfix jail
    ini_file:
      dest: /etc/fail2ban/jail.local
      create: yes
      section: postfix
      option: enabled
      value: true
    register: fail2ban_postfix_jail

  - name: enable fail2ban sshd jail
    ini_file:
      dest: /etc/fail2ban/jail.local
      create: yes
      section: sshd
      option: enabled
      value: true
    register: fail2ban_sshd_jail

  - name: enable and restart fail2ban
    service: name=fail2ban enabled=yes state=restarted
    when: fail2ban_backend.changed or fail2ban_postfix_jail.changed or
      fail2ban_sshd_jail.changed

  - name: enable and start fail2ban
    service: name=fail2ban enabled=yes state=started
    when: not (fail2ban_backend.changed or fail2ban_postfix_jail.changed)

  - name: add logwatch filtering in secure.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/secure.conf
      create: yes
      line: '*Remove = New seat seat[0-9]+\.$'

  - name: add logwatch filtering in secure.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/secure.conf
      line: '*Remove = Watching system buttons on /dev/input'

  - name: add logwatch filtering in secure.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/secure.conf
      line: '*Remove = Cannot create session: Already running in a session'

  - name: add logwatch filtering in secure.conf 4
    lineinfile:
      dest: /etc/logwatch/conf/services/secure.conf
      line: '*Remove = echo BECOME-SUCCESS-'

  - name: add logwatch filtering in rsyslogd.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/rsyslogd.conf
      create: yes
      line: "*OnlyService = rsyslogd"
      insertbefore: '\*Remove'
      firstmatch: yes

  - name: add logwatch filtering in rsyslogd.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/rsyslogd.conf
      line: "*Remove = rsyslogd.s (user|group)id changed to"

  - name: add logwatch filtering in rsyslogd.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/rsyslogd.conf
      line: "*Remove = : Acquired UNIX socket"

  - name: add logwatch filtering in rsyslogd.conf 4
    lineinfile:
      dest: /etc/logwatch/conf/services/rsyslogd.conf
      line: "*Remove = exiting on signal 15"

  - name: add logwatch filtering in postfix.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/postfix.conf
      create: yes
      line: '*Remove = lost connection .* from unknown\[unknown\]'

  - name: add logwatch filtering in postfix.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/postfix.conf
      line: '*Remove = synacor.*Blacklisted by Internal Reputation Service'

  - name: add logwatch filtering in postfix.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/postfix.conf
      line: '*Remove = netidentity.*blocked using urbl\.hostedemail\.com'

  - name: add logwatch filtering in postfix.conf 4
    lineinfile:
      dest: /etc/logwatch/conf/services/postfix.conf
      line: '*Remove = magellanhealth.*poor reputation'

  - name: add logwatch filtering in postfix.conf 5
    lineinfile:
      dest: /etc/logwatch/conf/services/postfix.conf
      line: '*Remove = improper command pipelining'

  - name: add logwatch filtering in sshd.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      create: yes
      line: "*OnlyService = sshd"
      insertbefore: '\*Remove'
      firstmatch: yes

  - name: add logwatch filtering in sshd.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Exiting on signal 15'

  - name: add logwatch filtering in sshd.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Server listening on .* port {{item}}'
    with_items: '{{relay_ssh_ports}}'
    when: relay_ssh_ports is defined

  - name: add logwatch filtering in sshd.conf 4
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Accepted.*xtK5LjLojcccD9XfFDng6QNPWijHnA8VGyeZxQPwCMo'

  - name: add logwatch filtering in sshd.conf 5
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: "*Remove = session (opened|closed) for user root"

  # It's safe to ignore these when we only allow public key authentication.
  - name: add logwatch filtering in sshd.conf 6
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Failed password for'
    when: disable_sshd_password_authentication is defined and
      disable_sshd_password_authentication

  - name: add logwatch filtering in sshd.conf 7
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = check pass; user unknown'

  # It's safe to ignore these when we only allow public key authentication.
  - name: add logwatch filtering in sshd.conf 8
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = authentication failure'
    when: disable_sshd_password_authentication is defined and
      disable_sshd_password_authentication

  - name: add logwatch filtering in sshd.conf 9
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Invalid user'

  - name: add logwatch filtering in sshd.conf 10
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Did not receive identification string'

  - name: add logwatch filtering in sshd.conf 11
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Bad protocol version identification'

  - name: add logwatch filtering in sshd.conf 12
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Connection (reset|closed) by .*preauth'

  - name: add logwatch filtering in sshd.conf 13
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Received disconnect from'

  - name: add logwatch filtering in sshd.conf 14
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Disconnected from'

  - name: add logwatch filtering in sshd.conf 15
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = ignoring max retries'

  - name: add logwatch filtering in sshd.conf 16
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = maximum authentication attempts exceeded'

  - name: add logwatch filtering in sshd.conf 17
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Received signal 15; terminating'

  - name: add logwatch filtering in sshd.conf 18
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Unable to negotiate with'

  - name: add logwatch filtering in sshd.conf 19
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Change of username or service not allowed'

  - name: add logwatch filtering in sshd.conf 20
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = Accepted publickey for'

  - name: add logwatch filtering in sshd.conf 21
    lineinfile:
      dest: /etc/logwatch/conf/services/sshd.conf
      line: '*Remove = pam_unix\(sshd:session\): session (opened|closed) for'

  # It's safe to ignore these when we only allow public key authentication.
  - name: add logwatch filtering in pam_unix.conf
    lineinfile:
      dest: /etc/logwatch/conf/services/pam_unix.conf
      create: yes
      line: '*Remove = sshd:auth.*(user unknown|authentication failure)'
    when: disable_sshd_password_authentication is defined and
      disable_sshd_password_authentication

  - name: add logwatch filtering in audit.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*OnlyService = (kernel:( \[[ 0-9\.]+\])?)?\s*(type=[0-9]+\s*)?audit.*'
      create: yes

  - name: add logwatch filtering in audit.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*Remove = res=success'
      
  - name: add logwatch filtering in audit.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*Remove = op=login acct=\"(\(unknown\)|bin|root|ftp|operator)\" .*res=failed'
      
  - name: add logwatch filtering in audit.conf 4
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*Remove = op=PAM:bad_ident .*acct=\"\?\" .*res=failed'
      
  - name: add logwatch filtering in audit.conf 5
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*Remove = op=maxtries exceeded'

  - name: add logwatch filtering in audit.conf 6
    lineinfile:
      dest: /etc/logwatch/conf/services/audit.conf
      line: '*Remove = NETFILTER_CFG table=filter family=[0-9]+ entries=[0-9]+$'

  - name: add logwatch filtering in sudo.conf 1
    lineinfile:
      dest: /etc/logwatch/conf/services/sudo.conf
      line: '*OnlyService = sudo'
      create: yes

  - name: add logwatch filtering in sudo.conf 2
    lineinfile:
      dest: /etc/logwatch/conf/services/sudo.conf
      line: '*RemoveHeaders'

  - name: add logwatch filtering in sudo.conf 3
    lineinfile:
      dest: /etc/logwatch/conf/services/sudo.conf
      line: '*Remove = Cannot create session: Already running in a session'

  - block:
    - lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^Port\s+{{item}}\b'
        line: 'Port {{item}}'
      with_items: '{{relay_ssh_ports}}'
      register: sshd_port
    - seport:
        ports: '{{item}}'
        proto: tcp
        setype: ssh_port_t
        state: present
      with_items: '{{relay_ssh_ports}}'
      when: 'getenforce.stdout is defined and "Enforcing" in getenforce.stdout'
    when: relay_ssh_ports is defined

  - name: disable SSH password logins for root
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin\s+'
      line: 'PermitRootLogin prohibit-password'
    register: sshd_root_login

  - name: disable SSH password authentication
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: '^PasswordAuthentication\s+'
      line: 'PasswordAuthentication no'
    when: disable_sshd_password_authentication is defined and
      disable_sshd_password_authentication
    register: sshd_password_authentication
    
  - name: reload sshd
    service: name=sshd state=reloaded
    when: sshd_port.changed or sshd_root_login.changed or
      (sshd_password_authentication is defined and
      sshd_password_authentication.changed)

  - name: enable ufw and disable logging
    ufw: state=enabled logging=off

  # On Ubuntu, `ufw enable` enables the systemd service, but on Fedora (at
  # least) it does not, so enable it explicitly just to be safe.
  - name: enable ufw service
    service: name=ufw enabled=yes

  - name: allow SMTP in ufw
    ufw: rule=allow port=smtp

  - name: allow relay SSH ports in ufw
    ufw: rule=allow port={{item}}
    with_items: '{{relay_ssh_ports}}'
    when: relay_ssh_ports is defined

- import_playbook: opendkim.yml
- import_playbook: dnsbl-check/dnsbl-check.yml
